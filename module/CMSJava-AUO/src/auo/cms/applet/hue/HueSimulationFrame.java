/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HueSimulationFrame.java
 *
 * Created on 2010/12/22, ¤W¤È 09:46:45
 */
package auo.cms.applet.hue;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.media.jai.JAI;
import javax.media.jai.PlanarImage;
import com.sun.media.jai.widget.DisplayJAI;
import java.awt.image.*;
import shu.cms.colorspace.depend.*;
import java.io.*;
import javax.swing.*;
import shu.image.ImageUtils;

/**
 *
 * @author SkyforceShen
 */
public class HueSimulationFrame
        extends javax.swing.JFrame {

    /** Creates new form HueSimulationFrame */
    public HueSimulationFrame() {
        initComponents();

        jai.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()                                                          {

            public void mouseMoved(java.awt.event.MouseEvent evt) {
                int x = evt.getX();
                int y = evt.getY();
                Raster raster = jai.getSource().getData();
                if (x < raster.getWidth() && y < raster.getHeight()) {
                    int[] pixels = raster.getPixel(x, y, new int[3]);
                    jLabel_R.setText(Double.toString(pixels[0]));
                    jLabel_G.setText(Double.toString(pixels[1]));
                    jLabel_B.setText(Double.toString(pixels[2]));
                } else {
                    jLabel_R.setText("-1");
                    jLabel_G.setText("-1");
                    jLabel_B.setText("-1");
                }
            }
        });
        jai.setDoubleBuffered(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSlider_H = new javax.swing.JSlider();
        jLabel_H = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSlider_S = new javax.swing.JSlider();
        jLabel_S = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSlider_V = new javax.swing.JSlider();
        jLabel_V = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jSlider_Turn = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel_R = new javax.swing.JLabel();
        jLabel_G = new javax.swing.JLabel();
        jLabel_B = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setMaximumSize(new java.awt.Dimension(800, 700));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(800, 700));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(800, 700));

        jScrollPane1.setViewportView(jai);

        jTable1.setModel(model);
        jTable1.setFocusCycleRoot(true);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getSelectionModel().addListSelectionListener(new RowListener());

        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        jLabel1.setText("H");

        jSlider_H.setEnabled(false);

        jLabel_H.setText("jLabel1");

        jLabel3.setText("S");

        jSlider_S.setEnabled(false);

        jLabel_S.setText("jLabel1");

        jLabel5.setText("V");

        jSlider_V.setMaximum(63);
        jSlider_V.setMinimum(-64);
        jSlider_V.setValue(0);
        jSlider_V.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_VStateChanged(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSlider_V, org.jdesktop.beansbinding.ELProperty.create("${value}"), jLabel_V, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setMnemonic('1');
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Triangle");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setMnemonic('2');
        jRadioButton2.setText("Trapezoid");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setMnemonic('3');
        jRadioButton3.setText("Offset");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setMnemonic('4');
        jRadioButton4.setText("Org Offset");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setMnemonic('5');
        jRadioButton5.setText("Modifed V1");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton6);
        jRadioButton6.setMnemonic('7');
        jRadioButton6.setText("No Double");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton7);
        jRadioButton7.setMnemonic('6');
        jRadioButton7.setText("Modifed V2");
        jRadioButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton4)
                            .addComponent(jRadioButton5)
                            .addComponent(jRadioButton7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton2)))
                    .addComponent(jRadioButton6))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton6)
                .addGap(54, 54, 54))
        );

        jLabel4.setText("Turn");

        jSlider_Turn.setValue(75);
        jSlider_Turn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_TurnStateChanged(evt);
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSlider_Turn, org.jdesktop.beansbinding.ELProperty.create("${value}"), jLabel7, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/auo/cms/applet/hue/warning.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(45, 45, 45))
        );

        jLabel2.setVisible(false);

        jPanel4.setMaximumSize(new java.awt.Dimension(143, 35));
        jPanel4.setMinimumSize(new java.awt.Dimension(143, 35));

        jLabel_R.setText("R");
        jLabel_R.setMaximumSize(new java.awt.Dimension(35, 15));
        jLabel_R.setMinimumSize(new java.awt.Dimension(35, 15));
        jLabel_R.setPreferredSize(new java.awt.Dimension(35, 15));

        jLabel_G.setText("G");
        jLabel_G.setMaximumSize(new java.awt.Dimension(35, 15));
        jLabel_G.setMinimumSize(new java.awt.Dimension(35, 15));
        jLabel_G.setPreferredSize(new java.awt.Dimension(35, 15));

        jLabel_B.setText("B");
        jLabel_B.setMaximumSize(new java.awt.Dimension(35, 15));
        jLabel_B.setMinimumSize(new java.awt.Dimension(35, 15));
        jLabel_B.setPreferredSize(new java.awt.Dimension(35, 15));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_R, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel_G, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel_B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_R, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_G, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBox1.setText("Warning");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSlider_H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(jLabel_H, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSlider_S, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(jLabel_S, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSlider_V, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel_V, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(21, 21, 21)
                        .addComponent(jSlider_Turn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel_H, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                            .addComponent(jSlider_H, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel_S, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                            .addComponent(jSlider_S, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel_V, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                            .addComponent(jSlider_V, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addComponent(jSlider_Turn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap(88, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jButton1.setText("Load Image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Switch");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jToggleButton1, 0, 0, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void jSlider_VStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_VStateChanged
      JSlider source = (JSlider) evt.getSource();
      if (!source.getValueIsAdjusting()) {
          updateImage();
      }

  }//GEN-LAST:event_jSlider_VStateChanged

    private void updateImage() {
        int adjustValue = (int) jSlider_V.getValue();
        int mnemonic = buttonGroup1.getSelection().getMnemonic();
        int turnValue = (int) this.jSlider_Turn.getValue();
        Method method = Method.getMethod(mnemonic);
        updateImage(adjustValue, turnValue, method);
    }

  private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
      updateImage();
  }//GEN-LAST:event_jRadioButton1ActionPerformed

  private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
      updateImage();
  }//GEN-LAST:event_jRadioButton2ActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      int returnVal = jFileChooser1.showOpenDialog(this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
          File file = this.jFileChooser1.getSelectedFile();
          String filename = file.getAbsolutePath();
          image = JAI.create("fileload", filename);
          jai.set(image);
      }
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
      boolean selected = jToggleButton1.isSelected();
      if (selected) {
          jai.set(image);
      } else {
          jai.set(bimage);
      }
  }//GEN-LAST:event_jToggleButton1ActionPerformed

  private void jSlider_TurnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_TurnStateChanged
      JSlider source = (JSlider) evt.getSource();
      if (!source.getValueIsAdjusting()) {
          updateImage();
      }
  }//GEN-LAST:event_jSlider_TurnStateChanged

  private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
      updateImage();
  }//GEN-LAST:event_jRadioButton3ActionPerformed

  private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
      updateImage();
  }//GEN-LAST:event_jRadioButton4ActionPerformed

  private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
      updateImage();
  }//GEN-LAST:event_jRadioButton5ActionPerformed

  private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
      updateImage();
  }//GEN-LAST:event_jRadioButton6ActionPerformed

  private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
      updateImage();
  }//GEN-LAST:event_jCheckBox1ActionPerformed

  private void jRadioButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton7ActionPerformed
      updateImage();
  }//GEN-LAST:event_jRadioButton7ActionPerformed

    static enum Method {

        Triangle('1'), Trapezoid('2'), Offset('3'), OriginalOffset('4'), ModifiedV1('5'), ModifiedV2('6'), NoDouble('7');

        Method(int mnemonic) {
            this.mnemonic = mnemonic;
        }
        int mnemonic;

        static Method getMethod(int mnemonic) {
            for (Method method : Method.values()) {
                if (method.mnemonic == mnemonic) {
                    return method;
                }
            }
            return null;
        }
    }

    double getValue(double[] hsvValues, int adjustValue, int turn, Method method) {
        boolean warning = (turn + adjustValue) > 100;
        this.jLabel2.setVisible(warning);
        double originalValue = hsvValues[2];
        int cratio = 1;

        switch (method) {
            case Triangle:
                return (originalValue < turn)
                        ? originalValue + (originalValue / turn) * adjustValue
                        : originalValue + (100 - originalValue) / (100 - turn) * adjustValue;
            case Trapezoid:
                return (originalValue < turn) ? originalValue + adjustValue
                        : originalValue + (100 - originalValue) / (100 - turn) * adjustValue;
            case Offset: {
                double c = hsvValues[1] * hsvValues[2];
                double cp = (c * cratio > 100) ? 100 : c * cratio;
                double offset = adjustValue * cp / 10000 * (100 - hsvValues[2]);

                return originalValue + offset;
            }
            case OriginalOffset: {
                double v = 255 * hsvValues[2] / 100;
                double c = hsvValues[1] / 100 * v;
                double offset = adjustValue * c / 128;
                offset = offset / 255 * 100;
                return originalValue + offset;
            }
            case ModifiedV1: {
                double v = 255 * hsvValues[2] / 100;
                double c = hsvValues[1] / 100 * v;
                double offset = adjustValue * c * (255 - v) / 128 / 128;
                offset = offset / 255 * 100;
                return originalValue + offset;
            }
            case ModifiedV2: {
                double s = hsvValues[1] / 100;
                double v = 255 * hsvValues[2] / 100;
                double c = s * v;
                double offset = adjustValue * c * c * (255 - v) * (1.15625 - s) / 128 / 128 / 128 * 4;
                offset = offset / 255 * 100;
                return originalValue + offset;
            }
            case NoDouble: {
                double s = hsvValues[1] / 100;
                double v = 255 * hsvValues[2] / 100;
                double c = s * v;
                double offset = adjustValue * c * (255 - v) * (1.15625 - s) / 128 / 128 * 4;
                offset = offset / 255 * 100;
                return originalValue + offset;
            }
        }


        return -1;
    }

    private void updateImage(int adjustValue, int turn, Method method) {
        bimage = image.getAsBufferedImage();
        WritableRaster raster = bimage.getRaster();
        boolean warning = jCheckBox1.isSelected();

        int height = raster.getHeight();
        int width = raster.getWidth();
        double[] rgbValues = new double[3];

        for (int h = 0; h < height; h++) {
            for (int w = 0; w < width; w++) {
                raster.getPixel(w, h, rgbValues);
                for (int x = 0; x < 3; x++) {
                    rgbValues[x] /= 255;
                }
                double[] hsvValues = HSV.fromRGBValues(rgbValues);
                hsvValues[2] = getValue(hsvValues, adjustValue, turn, method);
                rgbValues = HSV.toRGBValues(hsvValues);
                for (int x = 0; x < 3; x++) {
                    rgbValues[x] *= 255;
                }

                if (warning) {
                    if (rgbValues[0] > 255 || rgbValues[1] > 255 || rgbValues[2] > 255) {
                        rgbValues[0] = 255;
                        rgbValues[1] = 0;
                        rgbValues[2] = 0;
                    }

                    if (rgbValues[0] < -0.1 || rgbValues[1] < -0.1
                            || rgbValues[2] < -0.1) {
                        rgbValues[0] = 0;
                        rgbValues[1] = 255;
                        rgbValues[2] = 0;
                    }
                } else {
                    for (int x = 0; x < 3; x++) {
                        rgbValues[x] = rgbValues[x] > 255 ? 255 : rgbValues[x];
                        rgbValues[x] = rgbValues[x] < -0.1 ? 0 : rgbValues[x];
                    }
                }
                raster.setPixel(w, h, rgbValues);

            }
        }

        jai.set(bimage);




    }

    private class RowListener
            implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
//            output.append("ROW SELECTION EVENT. ");
            outputSelection();
        }
    }

    private void outputSelection() {
        System.out.println(jTable1.getSelectionModel().getLeadSelectionIndex());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        final HueSimulationFrame frame = new HueSimulationFrame();
        java.awt.EventQueue.invokeLater(new Runnable()                                                        {

            public void run() {
//                HueSimulationFrame frame = new HueSimulationFrame();
                frame.setVisible(true);
            }
        });

//        frame.jSlider_V.setValue(20);
//        frame.jRadioButton4.setSelected(true);

//        for (double v = 0; v <= 100; v += 5) {
//            double vp = getValue(v, 5, Method.Trapezoid);
//            System.out.println(v + " " + vp);
//        }

        String dirname = "D:\\³nÅé\\nobody zone\\Pattern\\skyforce Pattern Collect\\Fruits\\small";
        File file = new File(dirname);
//        try {
//            for (String filename : file.list()) {
//
//                frame.image = JAI.create("fileload", dirname + "/" + filename);
//                frame.updateImage();
//                String filename1 = filename.replaceAll(".jpg", "_0.jpg");
//                ImageUtils.storeJPEGImage(dirname + "/" + filename1, frame.image.getAsBufferedImage());
//                String filename2 = filename.replaceAll(".jpg", "_1.jpg");
//                ImageUtils.storeJPEGImage(dirname + "/" + filename2, frame.bimage);
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(HueSimulationFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_B;
    private javax.swing.JLabel jLabel_G;
    private javax.swing.JLabel jLabel_H;
    private javax.swing.JLabel jLabel_R;
    private javax.swing.JLabel jLabel_S;
    private javax.swing.JLabel jLabel_V;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider_H;
    private javax.swing.JSlider jSlider_S;
    private javax.swing.JSlider jSlider_Turn;
    private javax.swing.JSlider jSlider_V;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private PlanarImage image = JAI.create("fileload", "014_½Õ¾ã¤j¤p.jpg");
    private BufferedImage bimage;
    private DisplayJAI jai = new DisplayJAI(image);
    private Object[][] data = new Object[24][3];
    private MyTableModel model = new MyTableModel();
    private String[] columnNames = {
        "H", "S", "V"};

    class MyTableModel
            extends AbstractTableModel {

        MyTableModel() {
            int size = data.length;
            double pieceHue = 360. / size;
            for (int x = 0; x < size; x++) {
                data[x][0] = new Integer((int) pieceHue * x);
                data[x][1] = new Integer(1);
                data[x][2] = new Integer(0);
            }
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.length;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return true;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }
    }
}
