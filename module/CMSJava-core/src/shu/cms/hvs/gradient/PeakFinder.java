package shu.cms.hvs.gradient;

import java.util.*;

import shu.math.*;
import shu.math.array.*;

/**
 * <p>Title: Colour Management System</p>
 *
 * <p>Description: a Colour Management System by Java</p>
 * 找出資料的峰值, 及峰值之間的山谷
 *
 * <p>Copyright: Copyright (c) 2008</p>
 *
 * <p>Company: skygroup</p>
 *
 * @author skyforce
 * @version 1.0
 */
public class PeakFinder {

  static double[] data2 = new double[] {
      1.832307922971573, 0.7468520715366651, 1.0316490746944424,
      1.4207646560080036, 2.1086869643287045, 2.8224709249729685,
      3.0371732324828002, 3.6396610989676006, 3.8184953534089843,
      4.499980954362876, 4.237757558502118, 5.118845423357087,
      4.647698846186543, 4.74512598535334, 4.542673920702612, 4.427935709139419,
      4.313807700667013, 3.724972244225839, 3.720360326809697,
      3.907723735196697, 3.589814629193029, 2.9821869557454193,
      3.7126149205113137, 3.203670526604597, 3.256764863499882,
      3.2464770767604847, 3.2820421240584636, 3.278261048588206,
      3.3951130005542325, 3.5403483356290906, 3.3097066557700145,
      4.649764488143006, 4.657161328932347, 4.70867782514955, 4.70947526141714,
      4.978272533126869, 4.9662097666846705, 4.628023959651159,
      4.628347065154145, 4.647551880969218, 4.642213256192235,
      4.653905871323246, 4.619293100895447, 4.70535725552071, 4.693650948065539,
      4.383468825335797, 4.366844498127534, 4.3973835279339255,
      4.362332310740555, 4.315052964877509, 4.29362138030146, 4.251363414375902
      , 4.225161732337455, 4.623958568662346, 4.353892840509843,
      4.185001991707281, 4.146500781175803, 4.124097566381067,
      4.111711678864367, 4.052554147390595, 4.038418085835929,
      3.972403953510593, 3.9689681124476124, 3.8657036605303006,
      3.8400283668891575, 3.773705763324358, 3.774897265095319,
      3.729923981922525, 3.698992283610721, 4.0310170992953545,
      4.0345034972495455, 3.787816456768553, 3.7209745271242696,
      3.4368056849683626, 3.418593245966406, 3.7204656166343852,
      3.6877287559354954, 3.5952154008461434, 3.5860211965407984,
      3.533184127999334, 3.4816180419521743, 3.4740877522497158,
      3.44541988824011, 3.4368612301543067, 3.4074504478412564,
      3.2923420535336163, 3.271797661174787, 3.360888167752705,
      3.3051798509258106, 3.2907314820064357, 3.2441083338247267,
      3.083622875876756, 3.0580506695370104, 3.1236727014116923,
      3.0653950382106814, 3.0576388899548306, 3.0132669832957504,
      2.9653736319941686, 2.943870302172172, 2.9121687041315454,
      2.8683868291477665, 2.910486820772519, 2.8822478656144312,
      2.720012625230197
      , 2.6801338858518875, 2.7685592606089813, 2.7414331998053854,
      2.680213626618581, 2.638758662176201, 2.574057149727537,
      2.5680173935868424, 2.4442111693433617, 2.4166940466689084,
      2.3956558587047994, 2.3825473515661315, 2.3349630317642323,
      2.3253183589625905, 2.3426644713174483, 2.342869023767321,
      2.2811618348862908, 2.28093251040508, 2.2736312591008527,
      2.2901335019121234, 2.2915502664548058, 2.2851747052134215,
      2.1838156364214, 2.1961940350170153, 2.27854008938192, 2.2719046628508295,
      2.340996588820019, 2.3523259362120257, 2.4113664156662935,
      2.40479657175257, 2.241635572743803, 2.2361024107639196,
      2.3824563312868463, 2.3700904122489987, 2.3076050089847513,
      2.3072659144223735, 2.3121328798084733, 2.333919016169034,
      2.195180532206564, 2.4188860255632108, 2.2313371801333233,
      2.1854759949657137, 2.2585741399350354, 2.295000981190128,
      2.2157672526147962, 2.1923737810107014, 2.224145839625976,
      2.2028156022705616, 2.159833354125226, 2.1174548604119536,
      2.158619262199977, 2.1386345173984864, 2.162912194483283,
      2.119021506087961, 2.079410634062583, 2.0744963129818643,
      2.041818418287221, 2.0264084617047047, 2.0255085605372187,
      2.0109709402095177, 2.0975985502159347, 2.0544094012411733,
      2.0430151402712227, 1.998427877386689, 2.036364442875083,
      2.0221665887638665, 1.9340243553649543, 1.9147588134597981,
      2.004802856640481, 1.9637845494297608, 1.9264726254183415,
      1.9089103806169305, 2.085427268284434, 2.052085636778884,
      2.0981074603647585, 2.0732503228889527, 2.0181694648081248,
      1.9683965659585283, 2.04259111622423, 2.018559693269367,
      2.004090892613249, 1.9743043077187394, 1.9476826032981762,
      1.898985690911104, 1.9072899640459582, 1.8519106943995212,
      1.8942341439942538, 1.8421185973035108, 1.7437388753328378,
      1.69976592172668, 1.7812769950363645, 1.7561427616627725,
      1.7539382624463542, 1.7083657492262319, 1.72830811251481,
      1.701331502809012, 1.7068278264027867, 1.6651447623930835,
      1.6646393453015662, 1.6173273885001436, 1.6844398559242109,
      1.6298888027622525, 1.6682960557110391, 1.5990222668766592,
      1.6522261288180289, 1.5728903228831541
      , 1.5866466041532021, 1.5450437473297143, 1.5755592647562935,
      1.5378936092738513, 1.5760101688551913, 1.5569063194897126,
      1.5390419208962385, 1.5057520025180793, 1.532835405150081,
      1.4909189824954865, 1.5440269392615846, 1.4669230355855234,
      1.4830737336163793, 1.4569792528101289, 1.4714731421767056,
      1.435048192660929, 1.3944464841691797, 1.4347773786827247,
      1.389994489901028, 1.3721963907773898, 1.35698493181701,
      1.3788429395265211, 1.3431344137328551, 1.3401146102700068,
      1.3036349690650013, 1.297786152307708, 1.281266943514538,
      1.30494626959603, 1.273009608354755, 1.2808603705288988,
      1.259416711902304, 1.2432673724190408, 1.2703975621095651,
      1.2454169724709345, 0.5117278002684316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.16827232167713646};
  static double[] data = new double[] {
      1.186780504764684, 0.4419277425358814, 0.699743838698268,
      0.9376473436040413, 1.3702455926170032, 1.9048436603436087,
      2.031672826946931, 2.499689639171649, 2.643289031720556,
      3.1353213066138537, 2.9583105677018366, 3.631387450771655,
      3.3421618502482886, 3.434790503067873, 3.3580668334656565,
      3.3018005572833857, 3.2428089514407787, 2.8353575116241956,
      2.858006032774327, 3.0313198153505994, 2.8047186706228757,
      2.3547844566346896, 2.9319467878383563, 2.561828212155234,
      2.5934795020620243, 2.4135282288797555, 2.633614049589795,
      2.6723837639928263, 2.736034723886675, 2.87110442778355,
      2.712060313119636, 3.8111434049340147, 3.874989920292961,
      3.884260926106336, 3.9449246948647527, 4.175438664983432,
      4.194630674635619, 3.8988919480684956, 3.9425183646424102,
      3.9553866423960926, 3.951738824989377, 3.9836561126404035,
      3.974625395878178, 4.072273864069103, 4.068273641072835,
      3.78906640743142, 3.8087812882090475, 3.8365602014949047,
      3.835175945592482, 3.773473125310119, 3.7757363863262583
      , 3.7374189330064667, 3.7173878250657992, 3.889656626290048,
      3.8829574561052596, 3.6978658704431098, 3.6656229877696944,
      3.701664985408115, 3.6720021577521607, 3.645202076334158,
      3.6233873025506114, 3.574057709219801, 3.553005414211981,
      3.4904454824278446, 3.468481605038562, 3.4171380421483093,
      3.397995542260219, 3.393340042132394, 3.3657002589753517,
      3.6716089764095727, 3.638974173574013, 3.4468390236134496,
      3.417498971103555, 3.1483634686118194, 2.7875574180276885,
      3.374470218258864, 3.3753568432063616, 3.2908853768331596,
      3.2519487921027235, 3.2147321788373233, 3.1963694689682143,
      3.195593697362142, 3.1737160919485063, 3.152417722038251,
      3.1392967199974464, 3.0393588167871144, 3.0043793212555556,
      3.1027535106042023, 3.079881780476967, 3.0327423983051176,
      3.0057075891259615, 2.8811321271588213, 2.829588443306193,
      2.90124270491026, 2.867685702100289, 2.8459259842185247,
      2.8211353937443846, 2.78258742083608, 2.72352047698962,
      2.727950891990247, 2.6725580789752144, 2.7133708159429943,
      2.693591937655924, 2.52285977106618
      , 2.512117977740843, 2.612324073110699, 2.5690070146991957,
      2.515791213630564, 2.4654059472420045, 2.447449155381719,
      2.3947623238216806, 2.273630821038978, 2.244301204761314,
      2.2362522268276734, 2.224396465471898, 2.160008142955462,
      2.1727020229788536, 2.1713866402939743, 2.174302377493632,
      2.114402920161183, 2.1031629894640105, 2.1187925922720865,
      2.1306106263241986, 2.1324692183076763, 2.1189928209903997,
      2.0402171334538934, 2.048283251015505, 2.124424471802513,
      2.105360213344568, 2.195335723263497, 2.1952527030688884,
      2.262298220255161, 2.2682682296162398, 2.083110912192751,
      2.094971478128798, 2.248942019320623, 2.24532648010603,
      2.1645603899132198, 2.1497083771089933, 2.200001240947529,
      2.1855398867450617, 2.0866742784685357, 2.088748141941892,
      2.104184075540161, 2.075933890414831, 2.190228550274753,
      2.1679704171143044, 2.1049669657487016, 2.111241801478343,
      2.102122323017511, 2.090634589752767, 2.0705857854058536,
      2.047679554895808, 2.0690253501410893, 2.069299715768352,
      2.052600838475769, 2.027376387908646
      , 2.006069067277224, 1.9937326467500043, 1.9735431302514144,
      1.9599039986572961, 1.953906116560347, 1.9293531055186577,
      2.0068122750539032, 1.9954281939257044, 1.957494510444235,
      1.9388806341516442, 1.9789713280070487, 1.961752272630008,
      1.8727333171119085, 1.84807206329981, 1.946865918271783,
      1.9281168873717434, 1.8752256910081542, 1.8540498370877003,
      2.033072405327175, 1.9997460842623695, 2.038192675632672,
      2.0002431805537526, 1.9524593260825895, 1.9272995411894271,
      2.003954913436928, 1.9614669554465536, 1.9605685552556906,
      1.933956871337159, 1.915994938780159, 1.870416151058862,
      1.8378080488245132, 1.8027666185566886, 1.850069978895931,
      1.8058398821393666, 1.7023234362545736, 1.662519597249002,
      1.7599102235825512, 1.7185655310677248, 1.7103312518768234,
      1.6845920861388777, 1.6789146671673052, 1.6393914308839612,
      1.6719212253492515, 1.0571948480135234, 1.6051774972517023,
      1.5808388368951682, 1.6366581687442476, 1.5977966482435022,
      1.6265377642151861, 1.5730200241378043, 1.5939535828057387,
      1.5400764336841348
      , 1.5219392725106218, 1.5067315191607804, 1.5332640333745076,
      1.499219745561959, 1.5274928585912448, 1.4858771655641476,
      1.501567145100239, 1.459835364404512, 1.4797000355800947,
      1.452495803410443, 1.489001608068179, 1.428815466608853,
      1.4455712124823776, 1.3827348694259172, 1.4209282965312013,
      1.3960178461391024, 1.3516427055953955, 1.3673289856285464,
      1.3566639570167354, 1.331447316524418, 1.2868956682441421,
      1.3320439658880332, 1.282306323435705, 1.2677256468580254,
      1.2518494721180105, 1.2398389321909917, 1.204769226561666,
      1.237727755721835, 1.210318698247761, 1.2005354811359439,
      1.208552932950056, 1.183554114509434, 1.2074578230971156,
      1.1827314848806054, 1.1427007752005238, 1.1899943847377017,
      1.1794232933862077, 1.1865116780063545, 1.175663870223275,
      1.1614246076866266, 1.1660154908067852, 1.1536982831731848,
      1.131400988918358, 1.0970690149160873, 1.096816416060392,
      -12.353236425728369};

  /**
   * 找兩個peaek之間的最小值(山谷)
   * @param data double[]
   * @param peak1Index int
   * @param peak2Index int
   * @return int
   */
  private static int getMinIndexInPeak(double[] data, int peak1Index,
                                       int peak2Index) {
    double[] copy = DoubleArray.getRangeCopy(data, peak2Index, peak1Index);
    int minIndex = Maths.minIndex(copy);
    return peak2Index + minIndex;
  }

  /**
   * 從data中找出兩個高峰以及山谷
   * @param data double[]
   * @param fix boolean
   * @return int[]
   */
  public final static int[] getMaxAndMinIndex(double[] data, boolean fix) {
    int[] indexs = PeakFinder.getMaxAndMinIndex(data);
    if (fix) {
      for (int x = 0; x < indexs.length; x++) {
        indexs[x]++;
      }
    }
    return indexs;

  }

  /**
   * 從data中找出兩個高峰以及山谷
   * @param data double[]
   * @return int[] {高峰1, 山谷, 高峰2}
   * @todo H 算出來會有誤
   */
  public final static int[] getMaxAndMinIndex(double[] data) {
    int maxIndex1 = Maths.maxIndex(data);
//    int maxIndex2 = getSecondPeakIndex(data);
    int maxIndex2 = getSecondPeakIndex(data, maxIndex1);
    if (maxIndex2 == -1) {
      return new int[] {
          -1, -1, -1};
    }
    int minIndex = getMinIndexInPeak(data, maxIndex1, maxIndex2);
    if (Math.abs(maxIndex2 - minIndex) <= 1 ||
        Math.abs(maxIndex1 - minIndex) <= 1) {
      maxIndex2 = maxIndex1;
      maxIndex1 = getFirstPeakIndex(data, maxIndex2);
      minIndex = getMinIndexInPeak(data, maxIndex1, maxIndex2);
    }
    return new int[] {
        maxIndex2, minIndex, maxIndex1};
  }

  /**
   * 找到第一個高峰
   * @param data double[]
   * @param secondPeakIndex int
   * @return int
   */
  private static int getFirstPeakIndex(double[] data, int secondPeakIndex) {
    int size = data.length;
    int lastMaxIndex = -1;
    for (int x = secondPeakIndex; x < size - 1; x++) {
      double[] copy = DoubleArray.getRangeCopy(data, x, size - 1);
      int maxIndex = Maths.maxIndex(copy);
      int indexDiff = Math.abs(lastMaxIndex - maxIndex);

      if (lastMaxIndex != -1 && indexDiff != 1 && indexDiff != 0) {
        return secondPeakIndex + maxIndex + 1;
      }
      lastMaxIndex = maxIndex;
    }
    return -1;
  }

  /**
   * 找到第二個高峰
   * @param data double[]
   * @return int
   * @deprecated
   */
  private static int getSecondPeakIndex(double[] data) {
    int size = data.length;
    int lastMaxIndex = -1;
    for (int x = 0; x < size - 1; x++) {
      // 不斷的把資料的尾端去掉
      double[] copy = DoubleArray.getRangeCopy(data, 0, size - 1 - x);
      // 再找到最大值
      int maxIndex = Maths.maxIndex(copy);
      // 計算跟上次maxIndex的差異
      int indexDiff = Math.abs(lastMaxIndex - maxIndex);

      if (lastMaxIndex != -1 && indexDiff != 1 && indexDiff != 0) {
        // 第一次的不算 && 差異不能為 0 和 1
        return maxIndex;
      }
      lastMaxIndex = maxIndex;
    }
    return -1;
  }

  private static int getSecondPeakIndex(double[] data, int firstPeakIndex) {
//  int size = data.length;
    int lastMaxIndex = -1;
    for (int x = 0; x < firstPeakIndex - 1; x++) {
      // 不斷的把資料的尾端去掉
      double[] copy = DoubleArray.getRangeCopy(data, 0, firstPeakIndex - 1 - x);
      // 再找到最大值
      int maxIndex = Maths.maxIndex(copy);
      // 計算跟上次maxIndex的差異
      int indexDiff = Math.abs(lastMaxIndex - maxIndex);

      if (lastMaxIndex != -1 && indexDiff != 1 && indexDiff != 0) {
        // 第一次的不算 && 差異不能為 0 和 1
        return maxIndex;
      }
      lastMaxIndex = maxIndex;
    }
    return -1;
  }

  public static void main(String[] args) {
//    int maxIndex = Maths.maxIndex(data) + 1;
//    System.out.println(maxIndex);
//    int size = data.length;
//    for (int x = 0; x < size - 1; x++) {
//      double[] copy = DoubleArray.getRangeCopy(data, 0, size - 1 - x);
//      int maxIndex = Maths.maxIndex(copy) + 1;
//      System.out.println(x + " " + maxIndex);
//    }
    int[] indexes = getMaxAndMinIndex(data2);
    System.out.println(Arrays.toString(indexes));
  }
}
