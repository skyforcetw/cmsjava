ICC Profile Reader and Writer (iccio) 0.1

Support ICC Profile Specification v 4.2.0.0

Directory structure:

<where the download is unpacked>
 +--build/        a folder generated by ant build script when compile
    +-----classes/         folder for library class files
    +---------lib/         folder for libary jar file 'twiccio.jar'
    +-----samples/         folder for sample class packages and files
    |     +------header/      folder for header sample ICCProfileHeaderDump.class
    |     +----tagtable/      folder for ICCProfileTagTableDump.class
    |     +----tagtypes/      folder for ICCProfileTagTypeDump.class
    +--------test/        folder unit-test compiled code
    |        +---classes/    folder for .class files of unit-test codes
    +----data/        folder containing some .icc and .icm files
    +----docs/        folder for documentation generated from javadoc
    +-samples/        folder for sample source code
    +-----src/        folder for libary source code
    |     +---tw/edu/shu/im/iccio/   package folder for basic classes
    |                       +--datatype/  package folder for data type related classes
    |                       +---tagtype/  package folder for tag type classes
    +----test/        folder for unit-testing files
         +---src/       folder for the unit-testing source code

 
Compiling of the source:
  To compile the source directly, install JDK1.5 and Ant 1.6.5+.

  Using Ant script:
    Type 'ant' under the directory where build.xml exists, a menu is displayed:
     [echo] twiccio build file
     [echo] --------------------------
     [echo] compile          - compile all source files
     [echo] make-jar         - make a jar file for the class files
     [echo] clean            - clean the compiled objects
     [echo] compile-tests    - compile all unit test source files
     [echo] run-tests        - run all unit test codes
     [echo] run-test -Dclassname=xxx   - test a class, xxx=classname to test
     [echo] compile-samples  - compile all sample codes
     [echo] run-sample -Dclassname=xxx -Darg1=yyy  - run a sample with arguments
     [echo] dump-header -Dfilename=iccfile  - dump ICC Profile header in a file
     [echo] dump-tagtable -Dfilename=iccfile - dump ICC Profile tag table in a file
     [echo] dump-tagtypes -Dfilename=iccfile - dump ICC Profile tag types in a file
     [echo] gen-docs         - generate javadocs from the source files

    To compile the source, type 'ant compile', and to run unit test codes, 'ant run-tests'.

Use the sample code:
  The sample codes can be used to view ICC profile information and test the program as well.

  To see the header of an ICC profile:
     ant dump-header -Dfilename=<path and filename of the icc file>
  or
     ant run-sample -Dclassname=header.ICCProfileHeaderDump -Dfilename=<path and filename>
  or
     java -cp ./build/lib/twiccio.jar;./build/samples header.ICCProfileHeaderDump <path and filename>

  To see the tag table in an ICC profile:
     ant dump-tagtable -Dfilename=<path and filename of ICC file>
  or
     ant run-sample -Dclassname=tagtable.ICCProfileTagTableDump -Dfilename=<path and filename>
  or
     java -cp ./build/lib/twiccio.jar;./build/samples tagtable.ICCProfileTagTableDump <path and filename>

  To see the tag type signatures:
     ant dump-tagtypes -Dfilename=<path and filename of ICC file>
  or
     ant run-sample -Dclassname=tagtype.ICCProfileTagTypeDump -Dfilename=<path and filename>
  or
     java -cp ./build/lib/twiccio.jar;./build/samples tagtype.ICCProfileTagTypeDump <path and filename>
	[The tags.txt file is produced by this sample append-piping out to it.]

  *Convert ICC binary file into XML
     ant toxml -Dicc=<ICC filename> -Dxml=<XML output filename>
     (Use IE to browse the output XML file or use XSLT to transform into HTML)

  *Transform XML profile into HTML
     msxsl.exe <XML file> ./samples/toxml/xml2html.xsl >htmlfile.html
     (Use a browser to open htmlfile.html to see tabular output. But it doesn't contain as much detail as the XML file).

Generate API documentation
  ant gen-docs
  Browse the index.html file in the docs folder.
	[There're other documentation tools such as Doxygen that can produce design diagrams, worth a try.]

Developer Notes

* Size in the tag table entries
  The number in the tag table entries is the actual number of bytes excluding the padded bytes.
  Therefore, the actual bytes in file is determined by the offset/address of the entries.
  This might cause errors for a sequential reading of all data blocks.
  For a sequential reading, current file pointer must be kept asynchronous with the offset specified in the entries.

* Reference of other data blocks
  Some tagged data block links to another tagged data block instead of possessing its own.
  Solution:  Currently the data block is duplicated in memory (loaded twice), if the same
	file is written out, the data block will be duplicated in the output file as well.
	It's better to support the reference style, so it can be a requirement of next release.

* Rewriting of I/O part
  Considering that the tagged data blocks are not necessarily arranged in sequential order,
  random access to the file is indispensable to guarantee the correct positioning and reading of the datasets.
  All related data reading/writing parts originally designed using sequential streamed I/O are
  rewritten using java.io.RandomAccessFile.
